# Backend/app/routers/tools.py

from fastapi import APIRouter, Depends, Query
from .. import schemas

# Here we import all the service modules we created.
# This keeps the routing logic separate from the business logic.
from ..services import (
    solar_pay_service,
    solar_ed_service,
    green_cell_service,
    eco_meter_service,
    agri_solar_service,
    solar_ai_service
)

# We create a router. All routes defined here will be prefixed with /tools.
# The `tags` parameter groups these endpoints together in the API docs.
router = APIRouter(
    prefix="/tools",
    tags=["Tools"]
)

# --- Tool API Endpoints ---

# For SolarPay, we use POST because the frontend sends a structured JSON object.
@router.post("/solar-pay", response_model=schemas.SolarPayOutput)
def calculate_solar_pay(data: schemas.SolarPayInput):
    """
    Calculates solar rooftop financing details based on Indian government schemes.
    Receives system size, state, and monthly bill in the request body.
    """
    return solar_pay_service.calculate_solar_finance(data)

# For the other tools, we use GET with Query parameters because the inputs are simple.
@router.get("/eco-meter", response_model=schemas.EcoMeterOutput)
def track_impact(kwh_generated_monthly: float = Query(..., gt=0, description="Total units (kWh) generated by the solar system in a month.")):
    """Tracks environmental impact (CO2 saved, etc.) from your solar generation."""
    return eco_meter_service.track_environmental_impact(kwh_generated_monthly)

@router.get("/green-cell", response_model=schemas.GreenCellOutput)
def get_battery_health(
    capacity_ah: int = Query(..., gt=0, description="Battery's total capacity in Ampere-hours"),
    current_cycles: int = Query(..., ge=0, description="Number of charge/discharge cycles undergone"),
    avg_dod_percent: float = Query(..., ge=0, le=100, description="Average Depth of Discharge in percent (e.g., 80)")
):
    """Monitors solar battery health, efficiency, and lifecycle."""
    return green_cell_service.monitor_battery_health(capacity_ah, current_cycles, avg_dod_percent)
    
@router.get("/agri-solar", response_model=schemas.AgriSolarOutput)
def get_agri_solar_advice(
    pump_hp: int = Query(..., gt=0, description="Horsepower of the solar pump"),
    crop_type: str = Query(..., min_length=3, description="Type of crop being irrigated (e.g., 'wheat')")
):
    """Provides smart solar irrigation & farming assistance."""
    return agri_solar_service.get_smart_irrigation_advice(pump_hp, crop_type)

@router.get("/solar-ai", response_model=schemas.SolarAIOutput)
def get_roof_analysis(
    pincode: str = Query(..., min_length=6, max_length=6, regex="^[1-9][0-9]{5}$", description="Indian Pincode of the location"),
    roof_area_sqft: int = Query(..., gt=50, description="Available roof area in square feet")
):
    """MOCK AI: Optimizes solar placement using geolocation and roof analysis."""
    return solar_ai_service.analyze_roof_potential(pincode, roof_area_sqft)

@router.get("/solar-ed", response_model=schemas.SolarEdOutput)
def get_education_topic(topic: str = Query(..., description="e.g., 'subsidies' or 'net_metering'")):
    """Teaches India about solar in simple terms."""
    return solar_ed_service.get_educational_content(topic)